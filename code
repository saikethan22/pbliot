#include <ESP8266WiFi.h>
#include <ThingSpeak.h>

// Define ultrasonic sensor pins
#define TRIG_PIN1 2
#define ECHO_PIN1 3
#define TRIG_PIN2 4
#define ECHO_PIN2 5
#define TRIG_PIN3 6
#define ECHO_PIN3 7

// Define WiFi credentials
const char* ssid = "your_wifi_ssid";
const char* password = "your_wifi_password";

// Define ThingSpeak credentials
const long channelID = 2098549;
const char* apiKey = "T5WFDLDGAKTVZEBE";
WiFiClient client;

void setup() {
  Serial.begin(9600);

  // Configure ultrasonic sensor pins
  pinMode(TRIG_PIN1, OUTPUT);
  pinMode(ECHO_PIN1, INPUT);
  pinMode(TRIG_PIN2, OUTPUT);
  pinMode(ECHO_PIN2, INPUT);
  pinMode(TRIG_PIN3, OUTPUT);
  pinMode(ECHO_PIN3, INPUT);

  // Connect to WiFi network
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("connected.");

  // Connect to ThingSpeak
  ThingSpeak.begin(client);
}

void loop() {
  // Measure distances using ultrasonic sensors
  long duration1, distance1, duration2, distance2, duration3, distance3;
  digitalWrite(TRIG_PIN1, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN1, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN1, LOW);
  duration1 = pulseIn(ECHO_PIN1, HIGH);
  distance1 = duration1 * 0.034 / 2;
  digitalWrite(TRIG_PIN2, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN2, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN2, LOW);
  duration2 = pulseIn(ECHO_PIN2, HIGH);
  distance2 = duration2 * 0.034 / 2;
  digitalWrite(TRIG_PIN3, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN3, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN3, LOW);
  duration3 = pulseIn(ECHO_PIN3, HIGH);
  distance3 = duration3 * 0.034 / 2;

  // Print distance measurements to serial monitor
  Serial.print("Distance 1: ");
  Serial.print(distance1);
  Serial.print(" cm\t");
  Serial.print("Distance 2: ");
  Serial.print(distance2);
  Serial.print(" cm\t");
  Serial.print("Distance 3: ");
  Serial.print(distance3);
  Serial.println(" cm");

  // Upload distance measurements to ThingSpeak
  ThingSpeak.setField(1, distance1);
  ThingSpeak.setField(2, distance2);
  ThingSpeak.setField(3, distance3);
  int httpStatus = ThingSpeak.writeFields(channelID, apiKey);
  if (httpStatus == 200) {
    Serial.println("Data sent to ThingSpeak successfully.");
  } else {
    Serial.print("Failed to send data to ThingSpeak. HTTP status code: ");
    Serial.println(httpStatus);
  }

  // Wait for some time before taking the next measurement
  delay(5000);
}
